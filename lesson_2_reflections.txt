What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository you get the repitory ready to accept commits. You need the repository to track different changes 
within your code.

 How is the staging area different from the working directory and the repository? What value do you think it offers?
 I believe the staging area allows you the opportunity to change your mind about the files you want to place into the repository
 
 How can you use the staging area to make sure you have one commit per logical change?
 You can use the staging area by using get add on each file one at a time before actually committing a file.
 
 What are some situations when branches would be helpful in keeping your history organized? How would branches help?
 Branches would be helpful if you had to suddenly stop working on your existing project to work on something more urgent. Branches
 will help you keep track of your current work place. 
 
 How do the diagrams help you visualize the branch structure?
 The diagrams provide a clear structure of how commits are tracked.
 
 What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
 The result of merging two branches is one working set of parameters for all members. They are represented
 that way to show a chronological history.
 
 What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
 
 The Pros of automatic merging is that you will not forget to merge commits when you get to a certain amount of changes.
 The cons to automatic merging is that you would have less control over when to merge and when  not be merge. The Pros to 
always doing mrges manually is that you have complete control. The cons to always doing merges manually is that there are
a lot of steps and you have to know what order which steps should be followed. 